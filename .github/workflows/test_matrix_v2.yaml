name: EKS Management On/Off Cluster - Test

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to manage'
        required: true
        type: choice
        options:
          - staging
          - development
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - Encendido
          - Apagado
      user:
        description: 'User requesting the action'
        required: true
        type: string
        default: 'test-user'

env:
  USER: ${{ github.event.inputs.user }}
  ENVIRONMENT: ${{ github.event.inputs.environment }}
  ACTION: ${{ github.event.inputs.action }}
  AWS_REGION: us-west-2
  TIMEOUT_SECONDS: 600
  AUTO_SHUTDOWN_HOURS: 6

jobs:
  validate-parameters:
    name: Validate input parameters
    runs-on: ubuntu-24.04
    timeout-minutes: 2
    outputs:
      valid: ${{ steps.validate.outputs.valid }}
      clusters: ${{ steps.validate.outputs.clusters }}
    steps:
      - name: Validate input parameters
        id: validate
        run: |
          echo "====== VALIDATION ======"
          echo "User: ${{ env.USER }}"
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Action: ${{ env.ACTION }}"
          echo "AWS Region: ${{ env.AWS_REGION }}"
          
          if [[ "${{ env.ENVIRONMENT }}" == "staging" ]]; then
            echo "clusters=[\"zeb-backend-staging\",\"zeb-erpnext-staging\"]" >> $GITHUB_OUTPUT
            echo "Clusters: zeb-backend-staging, zeb-erpnext-staging"
          else
            echo "clusters=[\"zeb-backend-develop\",\"zeb-erpnext-develop\"]" >> $GITHUB_OUTPUT
            echo "Clusters: zeb-backend-develop, zeb-erpnext-develop"
          fi
          
          echo "valid=true" >> $GITHUB_OUTPUT
          echo "Validation completed successfully"

  power-on:
    name: Power on clusters
    needs: validate-parameters
    if: needs.validate-parameters.outputs.valid == 'true' && github.event.inputs.action == 'Encendido'
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    strategy:
      matrix:
        cluster: ${{ fromJson(needs.validate-parameters.outputs.clusters) }}
      fail-fast: false
    steps:
      - name: Power on cluster
        run: |
          echo "====== POWER ON ======"
          echo "Starting cluster: ${{ matrix.cluster }}"
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Region: ${{ env.AWS_REGION }}"
          echo "Timeout: ${{ env.TIMEOUT_SECONDS }}"
          echo ""
          echo "SNS Message would be:"
          echo "${{ matrix.cluster }},${{ env.AWS_REGION }},on,${{ env.TIMEOUT_SECONDS }}"
          echo ""
          echo "Command would be:"
          echo "aws sns publish --topic-arn TOPIC_ARN --message MESSAGE"
          echo ""
          echo "Successfully simulated power-on for ${{ matrix.cluster }}"

      - name: Wait between operations
        run: |
          echo "Waiting 5 seconds before next operation..."
          sleep 5

  schedule-auto-shutdown:
    name: Schedule automatic shutdown
    needs: [validate-parameters, power-on]
    if: needs.validate-parameters.outputs.valid == 'true' && github.event.inputs.action == 'Encendido'
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    strategy:
      matrix:
        cluster: ${{ fromJson(needs.validate-parameters.outputs.clusters) }}
      fail-fast: false
    steps:
      - name: Calculate shutdown time
        id: time
        run: |
          FUTURE_TIME=$(date -u -d "+${{ env.AUTO_SHUTDOWN_HOURS }} hours" +"%Y-%m-%dT%H:%M:%S")
          echo "scheduled_time=$FUTURE_TIME" >> $GITHUB_OUTPUT
          echo "Calculated shutdown time: $FUTURE_TIME UTC"

      - name: Schedule automatic shutdown
        run: |
          echo "====== AUTO-SHUTDOWN ======"
          echo "Cluster: ${{ matrix.cluster }}"
          echo "Shutdown time: ${{ steps.time.outputs.scheduled_time }} UTC"
          echo "Schedule name: shutdown-${{ matrix.cluster }}-${{ github.run_id }}"
          echo ""
          echo "Would create AWS EventBridge schedule"
          echo "Target SNS message: ${{ matrix.cluster }},${{ env.AWS_REGION }},off,${{ env.TIMEOUT_SECONDS }}"
          echo ""
          echo "Auto-shutdown scheduled successfully"

  power-off:
    name: Power off clusters
    needs: validate-parameters
    if: needs.validate-parameters.outputs.valid == 'true' && github.event.inputs.action == 'Apagado'
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    strategy:
      matrix:
        cluster: ${{ fromJson(needs.validate-parameters.outputs.clusters) }}
      fail-fast: false
    steps:
      - name: Power off cluster
        run: |
          echo "====== POWER OFF ======"
          echo "Stopping cluster: ${{ matrix.cluster }}"
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Region: ${{ env.AWS_REGION }}"
          echo ""
          echo "SNS Message would be:"
          echo "${{ matrix.cluster }},${{ env.AWS_REGION }},off,${{ env.TIMEOUT_SECONDS }}"
          echo ""
          echo "Command would be:"
          echo "aws sns publish --topic-arn TOPIC_ARN --message MESSAGE"
          echo ""
          echo "Successfully simulated power-off for ${{ matrix.cluster }}"

      - name: Cancel pending schedules
        run: |
          echo "====== CLEANUP ======"
          echo "Looking for schedules for cluster: ${{ matrix.cluster }}"
          echo "Would search for: shutdown-${{ matrix.cluster }}-*"
          echo "Would delete any found schedules"
          echo "Cleanup completed for ${{ matrix.cluster }}"

  notify-completion:
    name: Notify completion
    needs: [validate-parameters, power-on, power-off, schedule-auto-shutdown]
    if: always() && needs.validate-parameters.outputs.valid == 'true'
    runs-on: ubuntu-24.04
    steps:
      - name: Determine operation status
        id: status
        run: |
          echo "====== STATUS CHECK ======"
          echo "power-on result: ${{ needs.power-on.result }}"
          echo "power-off result: ${{ needs.power-off.result }}"
          echo "schedule result: ${{ needs.schedule-auto-shutdown.result }}"
          
          if [[ "${{ needs.power-on.result }}" == "success" || "${{ needs.power-off.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "Overall status: SUCCESS"
          elif [[ "${{ needs.power-on.result }}" == "failure" || "${{ needs.power-off.result }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "Overall status: FAILURE"
          else
            echo "status=skipped" >> $GITHUB_OUTPUT
            echo "Overall status: SKIPPED"
          fi

      - name: Log operation summary
        run: |
          echo "====== SUMMARY ======"
          echo "User: ${{ env.USER }}"
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Action: ${{ env.ACTION }}"
          echo "Status: ${{ steps.status.outputs.status }}"
          echo "Workflow Run: ${{ github.run_id }}"
          echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          if [[ "${{ env.ACTION }}" == "Encendido" && "${{ steps.status.outputs.status }}" == "success" ]]; then
            echo "Auto-shutdown scheduled for ${{ env.AUTO_SHUTDOWN_HOURS }} hours from now"
          fi
          echo ""
          echo "This was a SIMULATION - no real resources affected"
          echo "Review logs to see what would be executed"
